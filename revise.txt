"Folder pdf"
""
# Fetch marks for the student
student_marks = Marks.objects.filter(student=student, exam__isnull=False)
test_marks = Marks.objects.filter(student=student, test__isnull=False)
if not student_marks.exists():
    continue

# Subject abbreviations for exams
subject_abbreviations = {
   "MATHEMATICS": "MATHS",
   "ENGLISH": "ENGLISH",
   "LITERACY 1": "LITERACY 1",
   "RELIGIOUS EDUCATION": "R.E",
   "READING": "READING",
   "LUGANDA": "LUGANDA",
   "WRITING (LIT ll)": "WRITING (LIT 11)",
   "SCIENCE": "SCIENCE",
   "SOCIAL STUDIES": "SOCIAL STUDIES",
}

exam_records = []
student_marks = Marks.objects.filter(student=student, exam__isnull=False)

for class_mark in class_marks:
    subject_marks = class_mark.subject_marks or []
    exam = class_mark.exam
    exam_name = f"{exam.year} - {exam.term}" if exam else "N/A"

    exam_record = {
        'student_name': f"{class_mark.student.user.first_name} {class_mark.student.user.last_name}",
        'exam_name': exam_name,
        'year': exam.year if exam else None,
        'term': exam.term if exam else None,
        'subject_marks': [],
        'total_marks': 0,
        'total_full_marks': 0,
        'total_aggregate': 0,
        'div': None,
    }

    total_marks = 0
    total_full_marks = 0
    total_aggregate = 0

    for subject in subject_marks:
        subject_id = subject.get('subject_id')
        subject_obj = Subject.objects.filter(id=subject_id).first()
        if subject_obj:
            full_name = subject_obj.subject_name
            abbreviated_name = subject_abbreviations.get(full_name, full_name)
            marks = int(subject.get('marks', 0))
            remarks = calculate_remarks(marks)
            aggregate = calculate_aggregate(marks)

            total_marks += marks
            total_full_marks += 100  # Assuming full marks per subject is 100
            total_aggregate += aggregate

            exam_record['subject_marks'].append({
                'name': abbreviated_name,
                'marks': marks,
                'remarks': remarks,
                'aggregate': aggregate,
            })

    exam_record['total_marks'] = total_marks
    exam_record['total_full_marks'] = total_full_marks
    exam_record['total_aggregate'] = total_aggregate
    exam_record['div'] = calculate_division(total_aggregate)
    exam_records.append(exam_record)

# Rank students
rank = 0
previous_total = None
current_position = None

total_students = len(class_marks)

for exam_record in exam_records:
    rank += 1
    if exam_record['total_marks'] != previous_total:
        current_position = rank
    exam_record['position'] = current_position
    previous_total = exam_record['total_marks']

# Filter records for the specific student
student_records = [exam_record for exam_record in exam_records if exam_record['student_name'] == f"{student.user.first_name} {student.user.last_name}"]

""

generate_exam_pdf
""
# Fetch marks for all students in the same class
class_marks = Marks.objects.filter(student__assigned_class=student.assigned_class, exam__isnull=False)

exam_records = []

for class_mark in class_marks:
    subject_marks = class_mark.subject_marks or []
    exam = class_mark.exam
    exam_name = f"{exam.year} - {exam.term}" if exam else "N/A"

    exam_record = {
        'student_name': f"{class_mark.student.user.first_name} {class_mark.student.user.last_name}",
        'exam_name': exam_name,
        'year': exam.year if exam else None,
        'term': exam.term if exam else None,
        'subject_marks': [],
        'total_marks': 0,
        'total_full_marks': 0,
        'total_aggregate': 0,
        'div': None,
    }

    total_aggregate = 0
    total_marks = 0
    total_full_marks = 0

    subject_abbreviations = {
        "MATHEMATICS": "MATHS",
        "ENGLISH": "ENGLISH",
        "LITERACY 1": "LITERACY 1",
        "RELIGIOUS EDUCATION": "R.E",
        "READING": "READING",
        "LUGANDA": "LUGANDA",
        "WRITING (LIT ll)": "WRITING (LIT 11)",
        "SCIENCE": "SCIENCE",
        "SOCIAL STUDIES": "SOCIAL STUDIES",
    }

    for subject in subject_marks:
        subject_id = subject.get('subject_id')
        subject_obj = Subject.objects.filter(id=subject_id).first()
        if subject_obj:
            full_name = subject_obj.subject_name
            abbreviated_name = subject_abbreviations.get(full_name, full_name)
            marks = int(subject.get('marks', 0))
            remarks = calculate_remarks(marks)
            aggregate = calculate_aggregate(marks)

            total_marks += marks
            total_full_marks += 100  # Assuming full marks per subject is 100
            total_aggregate += aggregate

            exam_record['subject_marks'].append({
                'name': abbreviated_name,
                'marks': marks,
                'remarks': remarks,
                'aggregate': aggregate,
            })

    exam_record['total_marks'] = total_marks
    exam_record['total_full_marks'] = total_full_marks
    exam_record['total_aggregate'] = total_aggregate
    exam_record['div'] = calculate_division(total_aggregate)
    exam_records.append(exam_record)

# Sort exam records based on total marks
exam_records.sort(key=lambda x: x['total_marks'], reverse=True)

rank = 0
previous_total = None
current_position = None

for exam_record in exam_records:
    rank += 1
    if exam_record['total_marks'] != previous_total:
        current_position = rank
    exam_record['position'] = current_position
    previous_total = exam_record['total_marks']

# Extract the specific student's exam record
student_records = [
    exam_record for exam_record in exam_records
    if exam_record['student_name'] == f"{student.user.first_name} {student.user.last_name}"
]

""